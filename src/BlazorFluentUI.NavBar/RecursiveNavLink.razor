@using System.Windows.Input 
@namespace BlazorFluentUI.BFUNavBarInternal

@if (Items == null)
{
    <BFUNavLink Name=@Name
                Url=@Url
                NavMatchType=@NavMatchType
                Id=@Id
                NestedDepth=@NestedDepth
                IconName=@IconName
                IconSrc=@IconSrc
                @bind-IsExpanded=@IsExpanded
                Command=@Command
                CommandParameter=@CommandParameter/>
}
else
{
    <BFUNavLink Name=@Name
                Url=@Url
                NavMatchType=@NavMatchType
                Id=@Id
                NestedDepth=@NestedDepth
                IconName=@IconName
                IconSrc=@IconSrc
                @bind-IsExpanded=@IsExpanded
                Command=@Command
                CommandParameter=@CommandParameter>
        @foreach (IBFUNavBarItem subItem in Items)
        {
            <BFURecursiveNavLink Name=@subItem.Text
                                 Url=@subItem.Url
                                 NavMatchType=@subItem.NavMatchType
                                 Id=@subItem.Id
                                 NestedDepth=@(NestedDepth + 1)
                                 IconName=@subItem.IconName
                                 IconSrc=@subItem.IconSrc
                                 Items=@subItem.Items
                                 @bind-IsExpanded=@IsExpanded
                                 Command=@subItem.Command
                                 CommandParameter=@subItem.CommandParameter/>
        }
    </BFUNavLink>
}
@code{

    [Parameter] public IEnumerable<IBFUContextualMenuItem> Items { get; set; }  //LINKS

    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool ForceAnchor { get; set; } //unused for now
    [Obsolete("Use IconName instead")]
    [Parameter]
    public string Icon
    {
        set
        {
            IconName = value;
        }
    }
    [Parameter] public string? IconName { get; set; }
    [Parameter] public string? IconSrc { get; set; }
    [Parameter] public bool IsButton { get; set; }
    [Parameter] public bool IsExpanded { get; set; }
    [Parameter] public EventCallback<bool> IsExpandedChanged { get; set; }
    [Parameter] public string Name { get; set; }
    [Parameter] public string Target { get; set; }  //link <a> target
    [Parameter] public string Title { get; set; } //tooltip and ARIA
    [Parameter] public string Id { get; set; }
    [Parameter] public string Url { get; set; }
    [Parameter] public int NestedDepth { get; set; } = 0;
    [Parameter] public NavMatchType NavMatchType { get; set; } = NavMatchType.RelativeLinkOnly;
    [Parameter] public EventCallback<BFUNavLink> OnClick { get; set; }
    [Parameter] public ICommand Command { get; set; }
    [Parameter] public object CommandParameter { get; set; }

}