@namespace BlazorFluentUI
@inherits FluentUIComponentBase

<LocalCS @bind-Rules="@CalloutLocalRules" />

<div class="ms-Callout-container" @ref="RootElementReference" style=@($"{(Hidden ? "visibility: hidden;" : "" )}")>
    <div class=@($"ms-Callout {CalloutRule.Selector.SelectorName} mediumFont {GetAnimationStyle()} {CalloutPosition.TargetEdge.ToString()} {ClassName}")
         @ref="calloutReference"
         style=@($"{CalloutPosition.ElementRectangle.GetStyle()}")
         tabindex="-1">
        @if (this.IsBeakVisible)
        {
            <div class="ms-Callout-beak @CalloutBeakRule.Selector.SelectorName" style=@($"{CalloutPosition.BeakPosition.ElementRectangle.GetStyle()}") />
            <div class="ms-Callout-beakCurtain" />
        }
        <Popup AriaLabel=@AriaLabel
                            AriaDescribedBy=@AriaDescribedBy
                            AriaLabelledBy=@AriaLabelledBy
                            ClassName="@("ms-Callout-main " + CalloutMainRule.Selector.SelectorName)"
                            ShouldRestoreFocus="true"
                            OnDismiss=@OnDismiss
                            Style=@($"{(contentMaxHeight != -1 ? $"max-height:{contentMaxHeight}px;" : "")}{(overflowYHidden ? "overflow-y:hidden;" : "")}")>
            @ChildContent
        </Popup>
    </div>
</div>

