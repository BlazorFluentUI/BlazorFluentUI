@page "/TextFieldNumberPage"
@using System.ComponentModel.DataAnnotations

<header class="root">
    <h1 class="title">NumberTextField</h1>
</header>
<div class="section" style="transition-delay: 0s;">
    <div id="overview" tabindex="-1">
        <h2 class="subHeading hiddenContent">Overview</h2>
    </div>
    <div class="content">
        <div class="ms-Markdown">
            <p>
                Number text fields (<code>NumberTextField</code>) give people a way to enter and edit numbers (<code>int, long, short, double, float, decimal</code>). They’re used in forms, modal dialogs, tables, and other surfaces where number input is required.
</p>
        </div>
    </div>
</div>
<div class="section" style="transition-delay: 0s;">
    <div id="overview" tabindex="-1">
        <h2 class="subHeading">Usage</h2>
        <p>These <code>&lt;NumberTextField&gt;</code> components can be used both within and without <code>&lt;EditForm&gt;</code> block <strong>but</strong> you don't get validation messages when you don't put them in an <code>&lt;EditForm&gt;</code></p>
    </div>
    <div>
        <div class="subSection">
            <Demo Header="TextFieldNumbers without EditForm" Key="0" MetadataPath="TextFieldNumberPage">
                <div class="textFieldDiv">
                    <NumberTextField Label="Int test" @bind-Value="model.exampleInt" @bind-Value:event="OnChange" />
                </div>
                Example int: @model.exampleInt
                <div class="textFieldDiv">
                    <NumberTextField Label="Long test" @bind-Value="model.exampleLong" />
                </div>
                Example long: @model.exampleLong
                <div class="textFieldDiv">
                    <NumberTextField Label="Short test (unbound)" Value="Int16.MinValue" />
                </div>
                <div class="textFieldDiv">
                    <NumberTextField Label="Float test (OnChange)" @bind-Value="@model.exampleFloat" @bind-Value:event="OnChange" />
                    Example float: @model.exampleFloat
                </div>
                <div class="textFieldDiv">
                    <NumberTextField Label="Double test" @bind-Value="@model.exampleDouble" />
                    Example double: @model.exampleDouble
                </div>
                <div class="textFieldDiv">
                    <NumberTextField Label="Decimal test" @bind-Value="@model.exampleDecimal" />
                    Example decimal: @model.exampleDecimal
                </div>
            </Demo>
        </div>
        <div class="subSection">
            <Demo Header="TextFieldNumbers with EditForm" Key="1" MetadataPath="TextFieldNumberPage">
                <EditForm Model=@model OnValidSubmit=@HandleValidSubmit>
                <FluentUIValidationSummary />
                <div class="textFieldDiv">
                    <NumberTextField Label="Int test" @bind-Value="model.exampleInt" @bind-Value:event="OnChange" />
                </div>
                Example int: @model.exampleInt
                <div class="textFieldDiv">
                    <NumberTextField Label="Long test" @bind-Value="model.exampleLong" />
                </div>
                Example long: @model.exampleLong
                <div class="textFieldDiv">
                    <NumberTextField TValue="short" Label="Short test (unbound)" Value="Int16.MinValue" />
                </div>
                <div class="textFieldDiv">
                    <NumberTextField Label="Float test (OnChange)" @bind-Value="@model.exampleFloat" @bind-Value:event="OnChange" />
                    Example float: @model.exampleFloat
                </div>
                <div class="textFieldDiv">
                    <NumberTextField Label="Double test" @bind-Value="@model.exampleDouble" />
                    Example double: @model.exampleDouble
                </div>
                <div class="textFieldDiv">
                    <NumberTextField Label="Decimal test" @bind-Value="@model.exampleDecimal" />
                    Example decimal: @model.exampleDecimal
                </div>
                </EditForm>
            </Demo>
        </div>
    </div>
</div>
@code {
    ExampleModel model = new ExampleModel();

    class ExampleModel
    {
        public int exampleInt { get; set; } = int.MaxValue;
        public long exampleLong { get; set; } = DateTime.Now.Ticks;
        public float exampleFloat { get; set; } = Single.MaxValue;
        public double exampleDouble { get; set; } = Double.MaxValue;
        public decimal exampleDecimal { get; set; } = Decimal.One / 3;
    }


    public void HandleValidSubmit()
    {

    }
}
