@using Microsoft.AspNetCore.Components
@inherits LayoutComponentBase


<Stack Horizontal="true" Style="width:100%;">
    <ResponsiveLayout MinWidth="ResponsiveMode.Medium.ToMinCssValue()">
        <StackItem Grow="0" DisableShrink="true" Style="height:100%;overflow:hidden;">
            <NavMenu />
        </StackItem>
    </ResponsiveLayout>


    <StackItem Grow="1" Style="overflow:hidden">
        <Stack VerticalFill="true" Style="width:100%;">

            <ResponsiveLayout MaxWidth="ResponsiveMode.Medium.ToMaxCssValue()">
                <StackItem Grow="0" VerticalFill="false">
                    <IconButton IconName="GlobalNavButton" OnClick=@ShowMenu />
                </StackItem>
            </ResponsiveLayout>

            <ResponsiveLayout MinWidth="ResponsiveMode.Medium.ToMinCssValue()">
                <Stack Horizontal="true" HorizontalAlign="Alignment.SpaceBetween" VerticalAlign="Alignment.Center" Style="width:100%">
                    <StackItem Grow="0" VerticalFill="false">
                        <div class="top-row">
                            <Link Href="https://github.com/BlazorFluentUI/BlazorFluentUI" Target="_blank">View GitHub repo of BlazorFluentUI...</Link>
                        </div>
                    </StackItem>
                    <StackItem DisableShrink="true">
                        @*<GlobalCS CreateGlobalCss=@(()=>CreateGlobalCss(ThemeProvider.Theme))/>*@
                        <Toggle Checked=customTheme CheckedChanged="@SwitchTheme" OnText="Dark Theme" OffText="Default Theme" />
                    </StackItem>
                </Stack>
            </ResponsiveLayout>

            <StackItem Grow="1" Tokens="new StackItemTokens { Padding = ((int)CurrentMode <= (int)ResponsiveMode.Medium ? 10 : 0) }" Style="overflow-y:auto;">
                @Body
            </StackItem>
        </Stack>

        <ResponsiveLayout MaxWidth="ResponsiveMode.Medium.ToMaxCssValue()">
            <Panel Type=@PanelType.SmallFixedNear OnDismiss=@(() => isPanelOpen = false) IsOpen=@isPanelOpen IsLightDismiss="true">
                <NavigationTemplate>
                    <IconButton IconName="GlobalNavButton" OnClick=@(() => isPanelOpen = false) />
                    <Link Href="https://github.com/BlazorFluentUI/BlazorFluentUI" Target="_blank">View GitHub repo of BlazorFluentUI...</Link>
                </NavigationTemplate>
                <ChildContent>
                    <NavMenu OnLinkClicked=@OnNavLinkClick />
                </ChildContent>
            </Panel>
        </ResponsiveLayout>

    </StackItem>

</Stack>

@code {

    [Inject]
    public ThemeProvider ThemeProvider { get; set; }

    private bool? customTheme;

    private Rule ScrollbarRule = new Rule();
    //private ICollection<IRule> DarkThemeLocalRules { get; set; } = new System.Collections.Generic.List<IRule>();

    protected override void OnInitialized()
    {
        customTheme = ThemeProvider.Theme.Palette.GetType() == typeof(DefaultPaletteDark);

        base.OnInitialized();
    }

    private ICollection<IRule> CreateGlobalCss(ITheme theme)
    {
        var themeGlobalRules = new HashSet<IRule>();
        if (customTheme.GetValueOrDefault())
        {
            // for Firefox
            themeGlobalRules.Add(new Rule()
            {
                Selector = new CssStringSelector() { SelectorName = "body" },
                Properties = new CssString()
                {
                    Css = $"scrollbar-color:{ThemeProvider.Theme.Palette.NeutralTertiary} {ThemeProvider.Theme.Palette.NeutralLight};"
                }
            });

        }
        else
        {
            //// for webkit browsers
            //// for webkit browsers
            //themeGlobalRules.Add(new Rule()
            //{
            //    Selector = new CssStringSelector() { SelectorName = "*::-webkit-scrollbar" },
            //    Properties = new CssString()
            //    {
            //        Css = $"width: inherit;"
            //    }
            //});
            //themeGlobalRules.Add(new Rule()
            //{
            //    Selector = new CssStringSelector() { SelectorName = "*::-webkit-scrollbar-track" },
            //    Properties = new CssString()
            //    {
            //        Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralLight};"
            //    }
            //});
            //themeGlobalRules.Add(new Rule()
            //{
            //    Selector = new CssStringSelector() { SelectorName = "*::-webkit-scrollbar-thumb" },
            //    Properties = new CssString()
            //    {
            //        Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralTertiary};" +
            //          $"border-color: {ThemeProvider.Theme.Palette.NeutralLight};"
            //    }
            //});

        }

        // for webkit browsers
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar" },
            Properties = new CssString()
            {
                Css = $"width: inherit;"
            }
        });
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-button" },
            Properties = new CssString()
            {
                Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralLighter};" +
                      $"color:{ThemeProvider.Theme.SemanticColors.ButtonBorder}"
            }
        });
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-button:hover" },
            Properties = new CssString()
            {
                Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralTertiary};"
            }
        });
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-button:active" },
            Properties = new CssString()
            {
                Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralSecondary};"
            }
        });
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-button:vertical:decrement::after" },
            Properties = new CssString()
            {
                Css=$"border-width:0px 8px 8px 8px;"+
                    $"border-color:transparent transparent {ThemeProvider.Theme.Palette.NeutralLighter} transparent;"+
                    $"content:'**';"
            }
        });

        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-track" },
            Properties = new CssString()
            {
                Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralLighter};"
            }
        });
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-thumb" },
            Properties = new CssString()
            {
                Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralTertiaryAlt};" +
                  $"border: 2px solid {ThemeProvider.Theme.Palette.NeutralLighter};"
            }
        });
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-thumb:hover" },
            Properties = new CssString()
            {
                Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralTertiary};"
            }
        });
        themeGlobalRules.Add(new Rule()
        {
            Selector = new CssStringSelector() { SelectorName = "div::-webkit-scrollbar-thumb:active" },
            Properties = new CssString()
            {
                Css = $"background-color: {ThemeProvider.Theme.Palette.NeutralSecondary};"
            }
        });


        return themeGlobalRules;
    }



    private Task SwitchTheme(bool? checkedState)
    {
        customTheme = checkedState;
        if (checkedState.GetValueOrDefault())
        {
            var palette = new DefaultPaletteDark();
            ThemeProvider.UpdateTheme(palette, new DefaultSemanticColorsDark(palette), new DefaultSemanticTextColorsDark(palette));

        }
        else
        {
            ThemeProvider.UpdateTheme(new DefaultPalette());
        }
        return Task.CompletedTask;
    }

    private bool isMenuCollapsed = true;
    private bool isPanelOpen = false;

    [CascadingParameter] public ResponsiveMode CurrentMode { get; set; }

    void ShowMenu()
    {
        isPanelOpen = true;
    }

    void HideMenu()
    {
        isPanelOpen = false;
    }

    void OnNavLinkClick(NavLink linkBase)
    {
        isPanelOpen = false;
    }


}